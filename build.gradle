/*
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at:
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */

buildscript {
    ext.ionVersion = "[1.2,)" 
    ext.kotlin_version = "[1.2,)"
    ext.junitVersion = "[5.3,)"

    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath "me.champeau.gradle:jmh-gradle-plugin:0.4.7"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "software.amazon.ion:ion-java:$ionVersion"
    }
}

apply plugin: "java"
apply plugin: "kotlin"
apply plugin: 'checkstyle'

// benchmark
apply plugin: "me.champeau.gradle.jmh"

// Deployment
apply plugin: "maven-publish"  
apply plugin: "signing"


group 'software.amazon.ion'
archivesBaseName = 'ion-java-path-extraction'
version '1.0.1'

sourceCompatibility = 1.8

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

jmh {
    fork = 1
    benchmarkMode = ["thrpt"]
    failOnError = true

    // warmup
    warmupIterations = 5

    // iterations
    iterations = 10
}

checkstyle {
    toolVersion = "8.12"
    ignoreFailures = false
    maxWarnings = 0
    maxErrors = 0
    configDir = file("$rootProject.projectDir/config/checkstyle")
}
tasks.withType(Checkstyle) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

// Publishing
// -------------------------------------------------------------------------------

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    classifier = 'sources'
}

task javadocJar(type: Jar) {
    from javadoc
    classifier = 'javadoc'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = "ion-java-path-extraction"
            
            from components.java
            artifact sourcesJar
            artifact javadocJar

            pom {
                name = "Ion Java Path Extraction"
                packaging = "jar"
                url = "https://github.com/amzn/ion-java-path-extraction"
                description = "Ion Path Extraction API aims to combine the convenience of a DOM API with the speed of a streaming API."
                scm {
                    connection = "scm:git@github.com:amzn/ion-java-path-extraction.git"
                    developerConnection = "scm:git@github.com:amzn/ion-java-path-extraction.git"
                    url = "git@github.com:amzn/ion-java-path-extraction.git"
                }

                licenses {
                    license {
                        name = "The Apache License, Version 2.0"
                        url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                    }
                }

                developers {
                    developer {
                        name = "Amazon Ion Team"
                        email = "ion-team@amazon.com"
                        organization = "Amazon Labs"
                        organizationUrl = "https://github.com/amzn"
                    }
                }
            }
        }
    }
    repositories {
        maven {
            url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            credentials {
                username ossrhUsername
                password ossrhPassword
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}

// Dependencies --------------------------------------------------------------

repositories {
    mavenCentral()
}

dependencies {
    compile "software.amazon.ion:ion-java:$ionVersion"

    // using kotlin to make tests less verbose
    testCompile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    testCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"

    // JUnit 5
    testCompile "org.junit.jupiter:junit-jupiter-api:$junitVersion"
    testCompile "org.junit.jupiter:junit-jupiter-params:$junitVersion"
    testRuntime "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
}
